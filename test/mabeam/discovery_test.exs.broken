defmodule MABEAM.DiscoveryTest do
  use ExUnit.Case, async: false
  
  # Mock registry implementation for testing without starting actual registry
  defmodule MockRegistry do
    @mock_agents [
      {"inf_agent_1", :pid1, %{capability: :inference, health_status: :healthy, node: :node1, 
                               resources: %{memory_available: 0.8, cpu_available: 0.7, memory_usage: 0.2, cpu_usage: 0.3}}},
      {"inf_agent_2", :pid2, %{capability: :inference, health_status: :degraded, node: :node1,
                               resources: %{memory_available: 0.6, cpu_available: 0.5, memory_usage: 0.4, cpu_usage: 0.5}}},
      {"train_agent_1", :pid3, %{capability: :training, health_status: :healthy, node: :node2,
                                 resources: %{memory_available: 0.9, cpu_available: 0.8, memory_usage: 0.1, cpu_usage: 0.2}}},
      {"train_agent_2", :pid4, %{capability: :training, health_status: :healthy, node: :node2,
                                 resources: %{memory_available: 0.3, cpu_available: 0.4, memory_usage: 0.7, cpu_usage: 0.6}}},
      {"coord_agent_1", :pid5, %{capability: :coordination, health_status: :healthy, node: :node3,
                                 resources: %{memory_available: 0.7, cpu_available: 0.6, memory_usage: 0.3, cpu_usage: 0.4}}},
      {"multi_agent_1", :pid6, %{capability: [:inference, :training], health_status: :healthy, node: :node1,
                                 resources: %{memory_available: 0.5, cpu_available: 0.5, memory_usage: 0.5, cpu_usage: 0.5}}}
    ]
    
    def find_by_attribute(:capability, capability), %{registry: registry} do
      results = Enum.filter(@mock_agents, fn {_id, _pid, metadata} ->
        agent_capabilities = List.wrap(metadata.capability)
        capability in agent_capabilities
      end)
      {:ok, results}
    end
    
    def find_by_attribute(:health_status, status), %{registry: registry} do
      results = Enum.filter(@mock_agents, fn {_id, _pid, metadata} ->
        metadata.health_status == status
      end)
      {:ok, results}
    end
    
    def find_by_attribute(:node, node), %{registry: registry} do
      results = Enum.filter(@mock_agents, fn {_id, _pid, metadata} ->
        metadata.node == node
      end)
      {:ok, results}
    end
    
    def find_by_attribute(attr, _value), %{registry: registry} do
      {:error, {:unsupported_attribute, attr}}
    end
    
    def query(criteria), %{registry: registry} do
      results = Enum.filter(@mock_agents, fn {_id, _pid, metadata} ->
        Enum.all?(criteria, fn criterion ->
          matches_criterion?(metadata, criterion)
        end)
      end)
      {:ok, results}
    end
    
    def indexed_attributes, %{registry: registry} do
      [:capability, :health_status, :node]
    end
    
    def list_all(filter_fn), %{registry: registry} do
      agents = if filter_fn, %{registry: registry} do
        Enum.filter(@mock_agents, fn {_id, _pid, metadata} -> filter_fn.(metadata) end)
      else
        @mock_agents
      end
      agents
    end
    
    defp matches_criterion?(metadata, {path, value, op}), %{registry: registry} do
      actual_value = get_nested_value(metadata, path)
      apply_operation(actual_value, value, op)
    end
    
    defp get_nested_value(metadata, [key]), %{registry: registry} do
      Map.get(metadata, key)
    end
    
    defp get_nested_value(metadata, [key | rest]), %{registry: registry} do
      case Map.get(metadata, key), %{registry: registry} do
        nil -> nil
        nested_map when is_map(nested_map) -> get_nested_value(nested_map, rest)
        _ -> nil
      end
    end
    
    defp apply_operation(actual, expected, :eq), do: actual == expected
    defp apply_operation(actual, expected, :neq), do: actual != expected
    defp apply_operation(actual, expected, :gt), do: actual > expected
    defp apply_operation(actual, expected, :lt), do: actual < expected
    defp apply_operation(actual, expected, :gte), do: actual >= expected
    defp apply_operation(actual, expected, :lte), do: actual <= expected
    defp apply_operation(actual, expected_list, :in) when is_list(expected_list), do: actual in expected_list
    defp apply_operation(actual, expected_list, :not_in) when is_list(expected_list), do: actual not in expected_list
  end
  
  setup do
    # Create a test registry with mock data
    test_registry_name = :"test_registry_#{:erlang.unique_integer([:positive])}"
    {:ok, registry_pid} = MABEAM.AgentRegistry.start_link(name: test_registry_name)
    
    # Populate the registry with mock data
    mock_agents = [
      {"inf_agent_1", spawn(fn -> :timer.sleep(1000) end), %{capability: :inference, health_status: :healthy, node: :node1, 
                               resources: %{memory_available: 0.8, cpu_available: 0.7, memory_usage: 0.2, cpu_usage: 0.3}}},
      {"inf_agent_2", spawn(fn -> :timer.sleep(1000) end), %{capability: :inference, health_status: :degraded, node: :node1,
                               resources: %{memory_available: 0.6, cpu_available: 0.5, memory_usage: 0.4, cpu_usage: 0.5}}},
      {"train_agent_1", spawn(fn -> :timer.sleep(1000) end), %{capability: :training, health_status: :healthy, node: :node2,
                                 resources: %{memory_available: 0.9, cpu_available: 0.8, memory_usage: 0.1, cpu_usage: 0.2}}},
      {"train_agent_2", spawn(fn -> :timer.sleep(1000) end), %{capability: :training, health_status: :healthy, node: :node2,
                                 resources: %{memory_available: 0.3, cpu_available: 0.4, memory_usage: 0.7, cpu_usage: 0.6}}},
      {"coord_agent_1", spawn(fn -> :timer.sleep(1000) end), %{capability: :coordination, health_status: :healthy, node: :node3,
                                 resources: %{memory_available: 0.7, cpu_available: 0.6, memory_usage: 0.3, cpu_usage: 0.4}}},
      {"multi_agent_1", spawn(fn -> :timer.sleep(1000) end), %{capability: [:inference, :training], health_status: :healthy, node: :node1,
                                 resources: %{memory_available: 0.5, cpu_available: 0.5, memory_usage: 0.5, cpu_usage: 0.5}}}
    ]
    
    # Register all agents
    for {agent_id, pid, metadata} <- mock_agents, %{registry: registry} do
      :ok = GenServer.call(registry_pid, {:register, agent_id, pid, metadata})
    end
    
    on_exit(fn ->
      if Process.alive?(registry_pid), %{registry: registry} do
        GenServer.stop(registry_pid)
      end
    end)
    
    {:ok, registry: test_registry_name, registry_pid: registry_pid}
  end

  describe "single-criteria searches (O(1) ETS index lookups)", %{registry: registry} do
    test "find_by_capability returns agents with specific capability", %{registry: registry}, %{registry: registry} do
      {:ok, inference_agents} = MABEAM.Discovery.find_by_capability(:inference, registry)
      
      # Should find inference agents including multi-capability agent
      assert length(inference_agents) == 2
      
      agent_ids = Enum.map(inference_agents, fn {id, _pid, _metadata} -> id end)
      assert "inf_agent_1" in agent_ids
      assert "multi_agent_1" in agent_ids  # Multi-capability agent
    end
    
    test "find_healthy_agents returns only healthy agents", %{registry: registry}, %{registry: registry} do
      healthy_agents = MABEAM.Discovery.find_healthy_agents(registry)
      
      # All except inf_agent_2 (degraded) should be healthy
      assert length(healthy_agents) == 5
      
      agent_ids = Enum.map(healthy_agents, fn {id, _pid, _metadata} -> id end)
      refute "inf_agent_2" in agent_ids  # degraded agent should be excluded
      assert "inf_agent_1" in agent_ids
      assert "train_agent_1" in agent_ids
    end
    
    test "find_agents_on_node returns agents from specific node", %{registry: registry} do
      {:ok, node1_agents} = MABEAM.Discovery.find_agents_on_node(:node1, registry)
      
      assert length(node1_agents) == 3  # inf_agent_1, inf_agent_2, multi_agent_1
      
      agent_ids = Enum.map(node1_agents, fn {id, _pid, _metadata} -> id end)
      assert "inf_agent_1" in agent_ids
      assert "inf_agent_2" in agent_ids
      assert "multi_agent_1" in agent_ids
    end
  end
  
  describe "multi-criteria searches (atomic ETS queries)", %{registry: registry} do
    test "find_capable_and_healthy combines capability and health status", %{registry: registry} do
      # Find healthy inference agents
      capable_healthy = MABEAM.Discovery.find_capable_and_healthy(:inference, registry)
      
      # Should only return inf_agent_1 and multi_agent_1 (both healthy inference agents)
      assert length(capable_healthy) == 2
      
      agent_ids = Enum.map(capable_healthy, fn {id, _pid, _metadata} -> id end)
      assert "inf_agent_1" in agent_ids
      assert "multi_agent_1" in agent_ids
      refute "inf_agent_2" in agent_ids  # degraded, so excluded
    end
    
    test "find_agents_with_resources filters by memory and CPU availability", %{registry: registry} do
      # Find agents with at least 50% memory and 60% CPU available
      resource_agents = MABEAM.Discovery.find_agents_with_resources(0.5, 0.6, registry)
      
      # Should find agents meeting resource requirements and healthy
      agent_ids = Enum.map(resource_agents, fn {id, _pid, _metadata} -> id end)
      
      # inf_agent_1: memory=0.8, cpu=0.7 ✓
      # train_agent_1: memory=0.9, cpu=0.8 ✓
      # coord_agent_1: memory=0.7, cpu=0.6 ✓
      assert "inf_agent_1" in agent_ids
      assert "train_agent_1" in agent_ids
      assert "coord_agent_1" in agent_ids
      
      # These should be excluded
      refute "inf_agent_2" in agent_ids  # cpu=0.5 < 0.6
      refute "train_agent_2" in agent_ids  # memory=0.3 < 0.5
      refute "multi_agent_1" in agent_ids  # both exactly 0.5, cpu < 0.6
    end
    
    test "find_capable_agents_with_resources combines all three criteria", %{registry: registry} do
      # Find training agents that are healthy with sufficient resources
      capable_resourced = MABEAM.Discovery.find_capable_agents_with_resources(:training, 0.4, 0.5, registry)
      
      agent_ids = Enum.map(capable_resourced, fn {id, _pid, _metadata} -> id end)
      
      # train_agent_1: training + healthy + memory=0.9>0.4 + cpu=0.8>0.5 ✓
      # multi_agent_1: training + healthy + memory=0.5>0.4 + cpu=0.5=0.5 ✓
      assert "train_agent_1" in agent_ids
      assert "multi_agent_1" in agent_ids
      
      # train_agent_2: training + healthy + memory=0.3<0.4 ✗
      refute "train_agent_2" in agent_ids
    end
    
    test "find_agents_by_multiple_capabilities finds agents with ALL capabilities", %{registry: registry} do
      # Find agents with both inference AND training capabilities
      multi_capable = MABEAM.Discovery.find_agents_by_multiple_capabilities([:inference, :training], registry)
      
      # Only multi_agent_1 has both capabilities
      assert length(multi_capable) == 1
      
      {agent_id, _pid, metadata} = List.first(multi_capable)
      assert agent_id == "multi_agent_1"
      assert :inference in List.wrap(metadata.capability)
      assert :training in List.wrap(metadata.capability)
    end
    
    test "find_agents_by_resource_range finds agents within usage ranges", %{registry: registry} do
      # Find lightly loaded agents (0-40% memory usage, 0-40% CPU usage)
      lightly_loaded = MABEAM.Discovery.find_agents_by_resource_range({0.0, 0.4}, {0.0, 0.4}, registry)
      
      agent_ids = Enum.map(lightly_loaded, fn {id, _pid, _metadata} -> id end)
      
      # inf_agent_1: memory_usage=0.2, cpu_usage=0.3 ✓
      # train_agent_1: memory_usage=0.1, cpu_usage=0.2 ✓
      # coord_agent_1: memory_usage=0.3, cpu_usage=0.4 ✓
      assert "inf_agent_1" in agent_ids
      assert "train_agent_1" in agent_ids
      assert "coord_agent_1" in agent_ids
      
      # inf_agent_2: cpu_usage=0.5 > 0.4 ✗
      # train_agent_2: memory_usage=0.7 > 0.4 ✗
      # multi_agent_1: both usage = 0.5 > 0.4 ✗
      refute "inf_agent_2" in agent_ids
      refute "train_agent_2" in agent_ids
      refute "multi_agent_1" in agent_ids
    end
  end
  
  describe "advanced analytics and aggregations", %{registry: registry} do
    test "count_agents_by_capability returns frequency map", %{registry: registry} do
      capability_counts = MABEAM.Discovery.count_agents_by_capability(registry)
      
      # Should count capabilities correctly, including multi-capability agent
      assert capability_counts[:inference] == 2  # inf_agent_1, multi_agent_1
      assert capability_counts[:training] == 2   # train_agent_1, train_agent_2, multi_agent_1 (but we implement simple counting)
      assert capability_counts[:coordination] == 1  # coord_agent_1
    end
    
    test "get_system_health_summary provides comprehensive overview", %{registry: registry} do
      summary = MABEAM.Discovery.get_system_health_summary(registry)
      
      assert summary.total_agents == 6
      assert summary.health_distribution[:healthy] == 5
      assert summary.health_distribution[:degraded] == 1
      assert summary.healthy_percentage == (5/6) * 100
      
      # Node distribution
      assert summary.node_distribution[:node1] == 3
      assert summary.node_distribution[:node2] == 2
      assert summary.node_distribution[:node3] == 1
      
      # Protocol information
      assert :capability in summary.indexed_attributes
      assert :health_status in summary.indexed_attributes
      assert :node in summary.indexed_attributes
    end
    
    test "get_resource_utilization_summary aggregates resource usage", %{registry: registry} do
      summary = MABEAM.Discovery.get_resource_utilization_summary(registry)
      
      assert summary.healthy_agent_count == 5  # All except degraded agent
      
      # Verify averages are reasonable
      assert summary.average_memory_usage >= 0.0
      assert summary.average_memory_usage <= 1.0
      assert summary.average_cpu_usage >= 0.0
      assert summary.average_cpu_usage <= 1.0
      
      # Verify totals
      assert summary.total_memory_usage >= 0.0
      assert summary.total_cpu_usage >= 0.0
    end
    
    test "find_least_loaded_agents returns agents sorted by load", %{registry: registry} do
      least_loaded = MABEAM.Discovery.find_least_loaded_agents(:training, 2, registry)
      
      # Should return up to 2 training agents, sorted by combined load
      assert length(least_loaded) <= 2
      
      # Verify they're actually training agents
      for {_id, _pid, metadata} <- least_loaded, %{registry: registry} do
        assert :training in List.wrap(metadata.capability)
        assert metadata.health_status == :healthy
      end
      
      # Verify sorting (first should have lower load than second)
      if length(least_loaded) == 2, %{registry: registry} do
        [{_id1, _pid1, meta1}, {_id2, _pid2, meta2}] = least_loaded
        
        load1 = meta1.resources.memory_usage + meta1.resources.cpu_usage
        load2 = meta2.resources.memory_usage + meta2.resources.cpu_usage
        
        assert load1 <= load2
      end
    end
  end
  
  describe "testing support functions", %{registry: registry} do
    test "explicit implementation functions work correctly", %{registry: registry} do
      # Test capability lookup with explicit implementation
      {:ok, agents} = MABEAM.Discovery.find_by_capability_with_explicit_impl(:inference, registry)
      assert length(agents) == 2
      
      # Test capable and healthy with explicit implementation
      agents = MABEAM.Discovery.find_capable_and_healthy_with_explicit_impl(:training, registry)
      assert length(agents) == 2  # train_agent_1, multi_agent_1
      
      # Verify they're all healthy training agents
      for {_id, _pid, metadata} <- agents, %{registry: registry} do
        assert :training in List.wrap(metadata.capability)
        assert metadata.health_status == :healthy
      end
    end
  end
  
  describe "error handling and edge cases", %{registry: registry} do
    test "handles empty result sets gracefully", %{registry: registry} do
      # Search for non-existent capability
      {:ok, agents} = MABEAM.Discovery.find_by_capability(:non_existent_capability, registry)
      assert agents == []
      
      # Search for unhealthy agents (none in mock data)
      agents = MABEAM.Discovery.find_healthy_agents(registry)
      # Should find healthy agents, not empty
      assert length(agents) > 0
      
      # Search with impossible resource requirements
      agents = MABEAM.Discovery.find_agents_with_resources(2.0, 2.0, registry)  # > 100%
      assert agents == []
    end
    
    test "handles agents with missing or malformed metadata", %{registry: registry} do
      # This test would be more relevant with a real registry that might have edge cases
      # For now, we ensure our mock handles standard cases correctly
      
      agents = MABEAM.Discovery.find_capable_and_healthy(:inference, registry)
      assert length(agents) == 2
      
      # All returned agents should have properly formed metadata
      for {_id, _pid, metadata} <- agents, %{registry: registry} do
        assert Map.has_key?(metadata, :capability)
        assert Map.has_key?(metadata, :health_status)
        assert Map.has_key?(metadata, :resources)
      end
    end
    
    test "least_loaded_agents handles edge cases", %{registry: registry} do
      # Request more agents than available
      many_agents = MABEAM.Discovery.find_least_loaded_agents(:training, 100, registry)
      assert length(many_agents) <= 2  # Only 2 training agents available
      
      # Request from non-existent capability
      no_agents = MABEAM.Discovery.find_least_loaded_agents(:non_existent, 5, registry)
      assert no_agents == []
    end
  end
  
  describe "performance and optimization verification", %{registry: registry} do
    test "atomic queries avoid N+1 patterns", %{registry: registry} do
      # This test demonstrates that multi-criteria queries are atomic operations
      # rather than multiple separate queries combined at the application level
      
      # Complex multi-criteria query
      criteria = [
        {[:capability], :inference, :eq},
        {[:health_status], :healthy, :eq},
        {[:resources, :memory_available], 0.5, :gte},
        {[:resources, :cpu_available], 0.6, :gte},
        {[:node], :node1, :eq}
      ]
      
      start_time = System.monotonic_time(:microsecond)
      {:ok, results} = Foundation.query(criteria, registry)
      end_time = System.monotonic_time(:microsecond)
      
      query_time = end_time - start_time
      
      # Should find inf_agent_1 (meets all criteria)
      assert length(results) == 1
      {agent_id, _pid, _metadata} = List.first(results)
      assert agent_id == "inf_agent_1"
      
      # Query should be very fast even with complex criteria
      assert query_time < 1000  # Less than 1ms for mock implementation
    end
    
    test "indexed attributes provide O(1) lookups", %{registry: registry} do
      # Verify that the discovery module uses indexed attributes for fast lookups
      indexed_attrs = Foundation.indexed_attributes(registry)
      
      assert :capability in indexed_attrs
      assert :health_status in indexed_attrs
      assert :node in indexed_attrs
      
      # These should be the primary attributes used for fast discovery
      # Other attributes might require full table scans
    end
  end
  
  describe "integration with Foundation protocols", %{registry: registry} do
    test "works seamlessly with Foundation.query interface", %{registry: registry} do
      # This demonstrates that MABEAM.Discovery is built on Foundation protocols
      
      # Single criterion query
      criteria = [{[:capability], :training, :eq}]
      {:ok, training_agents} = Foundation.query(criteria, registry)
      assert length(training_agents) == 2
      
      # Multi-criterion query
      complex_criteria = [
        {[:capability], :inference, :eq},
        {[:health_status], :healthy, :eq},
        {[:resources, :memory_available], 0.7, :gte}
      ]
      {:ok, complex_results} = Foundation.query(complex_criteria, registry)
      assert length(complex_results) == 1
      
      {agent_id, _pid, _metadata} = List.first(complex_results)
      assert agent_id == "inf_agent_1"
    end
    
    test "discovery functions are optimized wrappers around Foundation protocols", %{registry: registry} do
      # Verify that discovery functions provide, %{registry: registry} domain-specific convenience
      # while using the same underlying Foundation protocol operations
      
      # These should produce equivalent results:
      
      # Method 1: Direct Foundation protocol
      criteria = [{[:capability], :coordination, :eq}, {[:health_status], :healthy, :eq}]
      {:ok, foundation_results} = Foundation.query(criteria, registry)
      
      # Method 2: MABEAM Discovery convenience function
      discovery_results = MABEAM.Discovery.find_capable_and_healthy(:coordination, registry)
      
      # Results should be identical
      assert length(foundation_results) == length(discovery_results)
      assert foundation_results == discovery_results
    end
  end
end